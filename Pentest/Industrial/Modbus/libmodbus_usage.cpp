/*
 * C++ Approach in reading modbus coils/registers...
Libmodbus required: http://libmodbus.org/
*/

#include <stdio.h>
#include <errno.h>
#include <modbus/modbus.h>

int main()
{
    printf("Testing modbus...\n");
    
    modbus_t *mb;
    uint16_t tab_reg[512];
    
    // Allocate resources and context
    mb = modbus_new_tcp("xx.xx.xx.xx", 502);
    if(mb == NULL)
    {
        fprintf(stderr, "Unable to allocate libmodbus context!\n");
        return -1;
    }
    
    // Configure modbus params
    modbus_set_debug(mb, true);
    
    // Try to connect
    if(modbus_connect(mb) == -1)
    {
        fprintf(stderr, "Failed to connect: %s", modbus_strerror(errno));
        modbus_free(mb);
        return -1;
    }
    
    // reading params
    int startAddress = 0xE2;
    int quantity = 100;
    
    int read = modbus_read_registers(mb, startAddress, quantity, tab_reg);
    if(read == -1)
    {
        fprintf(stderr, "Failed to read: %s\n", modbus_strerror(errno));
        modbus_close(mb);
        modbus_free(mb);
        return -1;
    }
    
//    int read = modbus_read_input_bits(mb, startAddress, quantity, tab_reg);
//    if(read == -1)
//    {
//        fprintf(stderr, "Failed to read bits: %s", modbus_strerror(errno));
//        modbus_close(mb);
//        modbus_free(mb);
//        return -1;
//    }
    
    for(int i = 0; i < read; i++)
    {
        printf("ADDR: 0x%X\t\treg[%d]=%d\t\t(0x%X)\n",startAddress+i, i, tab_reg[i], tab_reg[i]);
    }
    
    modbus_close(mb);
    modbus_free(mb);
    
    return 0;
}
